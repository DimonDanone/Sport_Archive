/*
Мальчик Олег очень любит мультсериал My Little Pony. А как можно его не любить, ведь там дружба, магия и цветные кони!
Вот уже который месяц Олег выпрашивает у своих родителей настоящего пони, но пока они готовы покупать ему лишь коллекционные фигурки героев мультсериала. С помощью этих фигурок Олег воссоздаёт лучшие эпизоды My Little Pony у себя на столе. Иногда он понимает, что у него уже есть все ключевые персонажи для очередного эпизода, и начинает испытывать желание срочно приобрести недостающие для этого эпизода фигурки. Например, если у Олега на руках есть Twilight Sparkle (Сумеречная Искорка) и Spike (Спайк), жизнь его будет не мила без Princess Celestia (Принцессы Селестии). Может случиться так, что новые фигурки вызовут новые желания: имея три вышеназванные фигурки, Олег непременно захочет и Nightmare Moon (Лунную пони).
Для удобства пронумеруем все фигурки целыми числами от 1 до n. Тогда желание Олега описывается двумя наборами чисел {a1, ..., ak} и {b1, ..., bt} и означает, что если у него уже есть фигурки с номерами a1, ..., ak, то он хочет также фигурки с номерами b1, ..., bt.
Родители Олега, чтобы отвлечь его от мечтаний о настоящем пони, готовы купить ему столько фигурок, сколько тот захочет. Вот только им хочется приобрести набор фигурок, который удовлетворит все желания Олега, за одну покупку. Естественно, родители не будут покупать лишние фигурки.
Какие фигурки будут у Олега после покупки?
*/
#include <iostream>
#include <bitset>
#include <vector>

using namespace std;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	const int maxn = 1000;
	int n, m; cin >> n >> m;

	vector<pair<bitset<maxn>, bitset<maxn>>> v(m);

	for (int i = 0; i < m; i++)
	{
		cin >> v[i].first;
		cin >> v[i].second;
	}

	bitset<maxn> now;
	cin >> now;

	int k = 0;
	bool t = false;

	for (int i = k; i < m; i++)
	{
		t = false;
		for (int j = k; j < m; j++)
		{
			if ((now & v[j].first) == v[j].first)
			{
				t = true;
				now |= v[j].second;
				swap(v[j], v[k]);
				k++;
			}
		}
		if (!t)
			break;
	}

	for (int i = n - 1; i > -1; i--)
		cout << now[i];
	cin >> n;
}