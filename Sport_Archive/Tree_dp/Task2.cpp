/*
На чемпионате Урала-2004 была задача "Одноклассники". Вкратце её содержание таково:
Ученице Тане поступило задание от директора школы оповестить свой класс о том, что 3 первых завтрашних занятия отменяются в связи с отключением электричества. Таня очень ловко справилась с этим. Сначала она решила позвонить Лене, затем Кате, а потом Маше. В то время, пока она звонила Кате, Лена, уже узнавшая новость, звонила Мише и т.д. В результате весь класс в миг узнал об отмене занятий.
В задаче требовалось узнать минимальное время, за которое весь класс мог узнать о приятной новости.
Но время шло, и летом Таня пошла работать в рекламное агентство "Карамболь". Рекламное агентство "Карамболь" имеет чётко выраженную иерархическую структуру. В её вершине находится генеральный директор. Он имеет своих подчинённых, которые, в свою очередь, также могут иметь подчинённых и т.д. В один прекрасный день Таня придумала метод, помогающий увеличить отдачу от рекламы на 110%. Она сразу же позвонила своей начальнице, затем своей подруге Лене, находящейся у неё в подчинении, потом Кате и Маше. Те, в свою очередь, быстро перезвонили своим друзьям и т.д. Определите, какое наименьшее время понадобится для того, чтобы всё агентство "Карамболь" узнало о сказочно эффективном методе Тани. Но учтите, что телефоны рекламного агентства настроены так, чтобы каждый работник мог говорить либо со своим непосредственным начальником, либо со своим непосредственным подчинённым (иначе и нельзя — девушки прекрасно заменяют работу продолжительным общением по телефону, если им разрешить чуток больше). Каждый телефонный разговор занимает ровно одну минуту.
*/

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

vector<long long> dp;
vector<vector<int>> g;

void dfs(int pos, int pr = -1)
{

	dp[pos] = 0;
	vector<int> res;

	for (int i = 0; i < g[pos].size(); i++)
	{
		int to = g[pos][i];
		if (to != pr)
		{
			dfs(to, pos);

			res.push_back(dp[to]);
		}
	}

	if (res.size() > 0)
	{
		sort(res.begin(), res.end());
		reverse(res.begin(), res.end());

		for (int i = 0; i < res.size(); i++)
		{
			res[i] += i + 1;
		}

		sort(res.begin(), res.end());
		reverse(res.begin(), res.end());

		dp[pos] = res[0];
	}
}


int main()
{
	int n; cin >> n;

	dp.resize(n, 0);
	g.resize(n);

	for (int i = 0; i < n; i++)
	{
		int a;
		while (true)
		{
			cin >> a;
			if (a == 0)
				break;

			a--;
			g[i].push_back(a);
			g[a].push_back(i);
		}
	}

	int tanya;
	cin >> tanya; tanya--;
	dfs(tanya);

	cout << dp[tanya];
}