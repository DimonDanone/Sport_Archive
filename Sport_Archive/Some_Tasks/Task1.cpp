/*
В длинном узком прямоугольном вольере сидят два ленивых тираннозавра Петя и Вася. Расстояние от них до противоположного края вольера L метров. Тираннозавры сидят, ждут обеда и не собираются никуда идти.
Кормят их следующим образом. Внутрь вольера на некотором целом в метрах расстоянии от тираннозавров запускают обед. Обед с постоянной скоростью движется прямо к динозаврам. Во время запуска обеда тираннозавр Петя открывает пасть и закрывает тогда, когда обед преодолеет X метров (дольше держать пасть открытой он не в состоянии). Соответственно, если запускать обед с расстояния X ? 1 метра и меньше, то он прибегает прямо в раскрытую пасть Пете, а если с расстояния X метров и больше, то Петя закрывает рот, и обед съедает Вася.
Поскольку тираннозавры вели малоактивный образ жизни, было принято решение сократить длину вольера до X метров от места, где сидели динозавры, ведь это минимальное расстояние, позволяющее кормить их обоих.
Однако расстояние X было неизвестно. Чтобы найти X, было решено запускать белых кроликов с различных расстояний и фиксировать, какому динозавру кролик достанется. Тут возникла проблема: у Васи оказалась аллергия именно на белых кроликов. Одного или двух кроликов он еще может съесть без вреда для здоровья, но трех ему уже никак нельзя.
Эта задача интерактивная.
После получения начальной информации о задаче вы сможете запускать кроликов и получать информацию от тестирующей системы о том, кому достался кролик.
Следите за тем, чтобы Вася не съел больше двух кроликов!

После того, как вы узнаете ответ, вы отправляете его в тестирующую систему и завершаете работу программы.
*/
#include <iostream>
#include <chrono>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <iterator>

using namespace std;

int l;

void go(int start, int pos)
{
    int ans = -1;

    for (int i = start; i < pos; i++)
    {
        cout << "? " << i << endl;

        string s1, s2, s3; cin >> s1 >> s2 >> s3;

        if (s1[0] == 'V')
        {
            ans = i;
            break;
        }
    }

    if (ans == -1)
        ans = pos;

    cout << "! " << ans << endl;

}

int main()
{
    cin >> l;

    int ans = 0;

    int r = 5*10000; //5*10000

    if (l <= r)
    {
        go(1, l);
    }
    else
    {
        int start = 1, ch = 5*10000 - 1, pos = 5*10000 - 1, k = 1;

        while(pos <= l)
        {
            cout << "? " << pos << endl;
            string s1, s2, s3; cin >> s1 >> s2 >> s3;

            if (s1[0] == 'V')
            {
                go(start, pos);
                break;
            }

            int c = pos;

            pos += (ch - k);
            k++;

            start = c + 1;

            if (pos >= l)
            {
                go(start, l);
            }
        }
    }
}
